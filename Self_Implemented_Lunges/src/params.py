import numpy as np
import pickle
import torch
from subprocess import call

print("Executing params.py!")

call(["python3", "parse_args.py"])
with open('hyperparams_dictionary_copy.pkl', 'rb') as f:
    args = pickle.load(f)

savepath=""
for value in vars(args).values():
    savepath += "_"
    savepath += str(value)
print("Savepath (inside params.py) = ", savepath)
n_objects = 8 # 6 body parts and 2 top and bottom reference points
object_dim = 4
output_dim = 4
n_relations = 16 #34#30#10
relation_dim = 3
external_effect_dim = 1
effect_dim = 50
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device,"device")
USE_CUDA = torch.cuda.is_available() 

batch_size = 35

seed_val = args.seed_val
n_epoch = args.epoch
learning_rate=args.learning_rate
dropout_rate=args.dropout
dtft_width = args.dtft_width

patience = 5
early_stopping=False

inc_labels=['b1','b2']

coords_ids =[12,24,26,25,30,31,33,34]
loss_id = {'rs':[],'rh':[],'fk':[],'bk':[],'fh':[],  'btoe':[], 'tp':[],  'bt':[] ,'total':[]}
keys = ['rs' ,'rh' ,'fk','bk' ,'fh' , 'btoe', 'tp' ,'bt' ]

receiver_rel = np.array([
                    [0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0], 
                    [1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0],
                    [0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0],
                    [0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0],
                    [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
                    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0],
                    ])

sender_rel = np.array([
                    [1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
                    [0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0],
                    [0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0],
                    [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1],
                    ])


# receiver_rel = np.array([
#                     [0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,], 
#                     [1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,],
#                     [0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,],
#                     [0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,],
#                     [0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,],
#                     [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
#                     [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,],
#                     [0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,],
#                     ])

# sender_rel = np.array([
#                     [1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,],
#                     [0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,],
#                     [0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,],
#                     [0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,],
#                     [0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,],
#                     [0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,],
#                     [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,],
#                     [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,],
#                     ])     

print("---------------------Completed params.py-------------------")